{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["AppContainer","styled","section","SearchContainer","MovieList","main","Search","useState","queryValue","setQueryValue","movies","setMovies","searchQuery","e","a","preventDefault","url","fetch","res","json","data","results","console","log","onSubmit","value","onChange","target","placeholder","type","disabled","icon","filter","movie","poster_path","map","MovieCard","key","id","MovieCardContainer","article","props","src","alt","title","originial_title","name","original_name","media_type","overview","App","href","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oyFAIA,IAAMA,EAAeC,IAAOC,QAAV,KA6BlB,IAAMC,EAAkBF,IAAOC,QAAV,KA4CfE,EAAYH,IAAOI,KAAV,KASf,SAASC,IAAU,IAAD,EACoBC,mBAAS,IAD7B,mBACTC,EADS,KACGC,EADH,OAEYF,mBAAS,IAFrB,mBAETG,EAFS,KAEDC,EAFC,KAIVC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAClBD,EAAEE,iBAEIC,EAHY,kHAGqGR,EAHrG,iDAMAS,MAAMD,GANN,cAMZE,EANY,gBAOCA,EAAIC,OAPL,OAOZC,EAPY,OAQhBT,EAAUS,EAAKC,SARC,kDAUhBC,QAAQC,IAAR,MAVgB,0DAAH,sDAcjB,OACE,kBAACpB,EAAD,KACE,0BAAMqB,SAAUZ,GACd,2BACEa,MAAOjB,EACPkB,SAAU,SAACb,GAAD,OAAOJ,EAAcI,EAAEc,OAAOF,QACxCG,YAAY,0CAGd,4BAAQC,KAAK,SAASC,UAAWtB,GAC/B,kBAAC,IAAD,CAASuB,KAAK,aAIlB,kBAAC3B,EAAD,KACGM,EACEsB,QAAO,SAACC,GAAD,OAAWA,EAAMC,eACxBC,KAAI,SAACF,GAAD,OACH,kBAACG,EAAD,CAAWH,MAAOA,EAAOI,IAAKJ,EAAMK,UAOhD,IAAMC,EAAqBtC,IAAOuC,QAAV,KAmFxB,SAASJ,EAAUK,GACjB,OACE,kBAACF,EAAD,CAAoBN,MAAOQ,EAAMR,OAC/B,yBAAKS,IAAG,6CAAwCD,EAAMR,MAAMC,aAAeS,IAAG,UAAKF,EAAMR,MAAMW,MAAjB,aAC9E,iCACE,4BAAKH,EAAMR,MAAMW,OAASH,EAAMR,MAAMY,iBAAmBJ,EAAMR,MAAMa,MAAQL,EAAMR,MAAMc,eACzF,8BAAON,EAAMR,MAAMe,YACnB,2BAAIP,EAAMR,MAAMgB,YAMTC,MA7Mf,WACE,OACE,kBAAClD,EAAD,KACE,gDACA,gEACoC,uBAAGmD,KAAK,oBAAR,YADpC,oEAIA,kBAAC7C,EAAD,QChBc8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ufCVN,IAAMC,EAAcC,YAAH,KAqBjBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACJ,EAAD,MACA,kBAAC,EAAD,OAEFK,SAASC,eAAe,SDiGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.cbc10d1e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport IcoFont from 'react-icofont';\nimport styled from 'styled-components';\n\nconst AppContainer = styled.section`\n  margin: 0 auto;\n  padding: 0 1rem;\n  width: 100%;\n\n  text-align: center;\n\n  @media screen and (min-width: 1200px) {\n    width: 1200px;\n  }\n\n  h1 {\n    font-size: 3rem;\n  }\n`;\n\nfunction App() {\n  return (\n    <AppContainer>\n      <h1>Movie Search App</h1>\n      <p>\n        Simple movie search app that uses <a href='https://imdb.com'>imdb.com</a> api to search for movies and tv shows\n        and lists them in a grid.\n      </p>\n      <Search />\n    </AppContainer>\n  );\n}\n\nconst SearchContainer = styled.section`\n  form {\n    margin: auto;\n    padding: 1rem 3rem;\n    display: flex;\n    align-items: center;\n  }\n\n  @media screen and (min-width: 768px) {\n    form {\n      width: 50%;\n    }\n  }\n\n  form input {\n    padding: 0.5rem 0.25rem;\n    flex-grow: 1;\n\n    background: none;\n    outline: 0;\n    border: 0;\n    border-bottom: 3px solid rgb(200, 200, 200);\n\n    color: white;\n    font-size: 1.5rem;\n    font-weight: bold;\n\n    transition: border-color 100ms linear;\n  }\n\n  form input:focus {\n    border-color: rgb(255, 255, 255);\n  }\n\n  form button {\n    background: none;\n    border: 0;\n    color: white;\n    font-size: 2rem;\n\n    cursor: pointer;\n  }\n`;\n\nconst MovieList = styled.main`\n  margin: 2em;\n\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1rem;\n  grid-auto-flow: dense;\n`;\n\nfunction Search() {\n  const [queryValue, setQueryValue] = useState('');\n  const [movies, setMovies] = useState([]);\n\n  const searchQuery = async (e) => {\n    e.preventDefault();\n\n    const url = `https://api.themoviedb.org/3/search/multi?api_key=1b433a8bbcfaa0e1feb6f57052c8fe99&language=en-US&query=${queryValue}&page=1&include_adult=false`;\n\n    try {\n      let res = await fetch(url);\n      let data = await res.json();\n      setMovies(data.results);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <SearchContainer>\n      <form onSubmit={searchQuery}>\n        <input\n          value={queryValue}\n          onChange={(e) => setQueryValue(e.target.value)}\n          placeholder='Search for movie, tv show or actor...'\n        />\n\n        <button type='submit' disabled={!queryValue}>\n          <IcoFont icon='search' />\n        </button>\n      </form>\n\n      <MovieList>\n        {movies\n          .filter((movie) => movie.poster_path)\n          .map((movie) => (\n            <MovieCard movie={movie} key={movie.id} />\n          ))}\n      </MovieList>\n    </SearchContainer>\n  );\n}\n\nconst MovieCardContainer = styled.article`\n  width: 100%;\n\n  position: relative;\n\n  overflow: hidden;\n\n  cursor: pointer;\n\n  &:nth-child(1) {\n    grid-column: span 2;\n    grid-row: span 2;\n  }\n\n  &:nth-child(4n) {\n    grid-column: span 2;\n    grid-row: span 2;\n  }\n\n  img {\n    width: 100%;\n  }\n\n  section {\n    padding: 1rem;\n    width: 100%;\n\n    position: absolute;\n    bottom: 0;\n\n    overflow: hidden;\n\n    background: rgba(0, 0, 0, 0.5);\n    backdrop-filter: blur(10px);\n\n    color: white;\n    text-align: left;\n    font-size: clamp(10px, 1vh, 16px);\n\n    h1 {\n      margin: 0;\n      max-width: 100%;\n\n      font-size: 1.2rem;\n\n      overflow: hidden;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n    }\n\n    p {\n      height: 4rem;\n      overflow: hidden;\n      mask-image: linear-gradient(to bottom, black 50%, transparent 100%);\n    }\n  }\n\n  @media all and (hover: hover) {\n    &:hover {\n      img {\n        transform: scale(1.05);\n        filter: blur(0px);\n      }\n\n      section {\n        transform: translateY(0);\n      }\n    }\n\n    img {\n      transform: scale(1);\n\n      transition: transform 500ms, filter 500ms;\n    }\n\n    section {\n      transform: translateY(100%);\n\n      transition: transform 200ms;\n    }\n  }\n`;\n\nfunction MovieCard(props) {\n  return (\n    <MovieCardContainer movie={props.movie}>\n      <img src={`https://image.tmdb.org/t/p/original${props.movie.poster_path}`} alt={`${props.movie.title} poster`} />\n      <section>\n        <h1>{props.movie.title || props.movie.originial_title || props.movie.name || props.movie.original_name}</h1>\n        <span>{props.movie.media_type}</span>\n        <p>{props.movie.overview}</p>\n      </section>\n    </MovieCardContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createGlobalStyle } from 'styled-components';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n  }\n\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans',\n      'Droid Sans', 'Helvetica Neue', sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n\n    color: white;\n    background-color: rgb(30,30,30);\n  }\n\n  a {\n    color: rgb(200,200,200);\n  }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}